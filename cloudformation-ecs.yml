# cloudformation-ecs.yml

AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for ECS/Fargate infrastructure for Pokedex Gui.

Parameters:
  AppName:
    Type: String
    Default: PokedexGui
    Description: Nome da aplicação (usado para nomear recursos).
  VpcId: # Parâmetro para o ID da VPC existente
    Type: String
    Description: O ID da VPC onde o cluster ECS será criado.
  SubnetIds: # Parâmetro para os IDs das Subnets existentes (pelo menos duas para Fargate)
    Type: CommaDelimitedList
    Description: Lista de IDs das Subnets para o ECS Fargate.

Resources:
  # 1. Repositório ECR para a imagem Docker
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub '${AppName}-frontend-repo'
      ImageScanningConfiguration:
        ScanOnPush: true # Habilita o scan de vulnerabilidades ao fazer push da imagem
      ImageTagMutability: MUTABLE # Ou IMMUTABLE para maior segurança (mas pode complicar o deploy)

  # 2. Cluster ECS
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AppName}-Cluster'

  # 3. Task Definition ECS (define o contêiner)
  # Note: Este é um exemplo básico. Em produção, você passaria mais configs,
  # como variáveis de ambiente, limites de CPU/Memória mais precisos, etc.
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AppName}-Frontend-Task'
      Cpu: '256' # 0.25 vCPU
      Memory: '512' # 512 MB
      NetworkMode: awsvpc # Necessário para Fargate
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn # Permissões para o Fargate puxar a imagem e enviar logs
      TaskRoleArn: !GetAtt ECSTaskRole.Arn # Permissões para a aplicação dentro do contêiner (se precisar de AWS API)
      ContainerDefinitions:
        - Name: !Sub '${AppName}-frontend'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppName}-frontend-repo:latest' # Será atualizada pelo pipeline
          PortMappings:
            - ContainerPort: 80 # Porta que o Nginx está escutando dentro do contêiner
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogGroup # Grupo de logs
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Sub '${AppName}-frontend'

  # 4. Serviço ECS (mantém o número desejado de instâncias da task)
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Sub '${AppName}-Frontend-Service'
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1 # Número de instâncias do seu contêiner
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED # Habilita IP público para acesso direto (para laboratório)
          Subnets: !Ref SubnetIds
          SecurityGroups:
            - !GetAtt FrontendSecurityGroup.GroupId # Grupo de segurança para o contêiner

  # 5. Grupo de Segurança para o Serviço ECS (permite tráfego HTTP de entrada)
  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite tráfego HTTP para o frontend Pokédex Gui
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # Permite acesso de qualquer IP na porta 80 (HTTP)

  # 6. IAM Role para o Fargate Executar a Task (Execution Role)
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy # Padrão para Fargate puxar imagens e enviar logs

  # 7. IAM Role para a Aplicação dentro da Task (Task Role)
  # Exemplo: Se sua app precisasse acessar o DynamoDB ou S3
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      # ManagedPolicyArns:
      #   - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess # Exemplo: se precisar ler do S3
      # Políticas personalizadas podem ser adicionadas aqui se a aplicação React precisar de acesso a outros serviços AWS

  # 8. CloudWatch Log Group
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${AppName}-frontend'
      RetentionInDays: 7 # Retenção de logs por 7 dias (ajuste conforme necessário)

Outputs:
  ECRRepositoryUri:
    Description: URI do repositório ECR
    Value: !GetAtt ECRRepository.RepositoryUri
    Export:
      Name: !Sub '${AppName}-ECRRepositoryUri'
  ECSClusterName:
    Description: Nome do Cluster ECS
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AppName}-ECSClusterName'
  ECSServiceName:
    Description: Nome do Serviço ECS
    Value: !Ref ECSService
    Export:
      Name: !Sub '${AppName}-ECSServiceName'
  FrontendPublicIp:
    Description: IP público do frontend ECS Fargate (se Enabled)
    Value: !GetAtt ECSService.NetworkConfiguration.AwsvpcConfiguration.PublicIp
    # Nota: O IP público do Fargate não é estático e muda em cada deploy/reinício da task.
    # Para um ambiente real, você usaria um Load Balancer (ALB) e um CNAME.