# .github/workflows/ci-cd.yml

# CI/CD completo com SonarCloud, DockerHub e Trivy
name: Pokédex Gui

on:
  push:
    branches:
      - containers-ecs
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: read
  id-token: write

jobs:
  testes_e_build:
    runs-on: ubuntu-latest
    steps:
      - name: Verifica o código
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 
      - name: Instala dependências
        run: npm install
      - name: Executa testes
        run: npm run test
      - name: Build React App # validação do build antes do Docker
        run: npm run build
        env:
          CI: false

  analise_sonarcloud: # job para análise do SonarCloud
    runs-on: ubuntu-latest
    needs: testes_e_build # Garante que os testes e o build do app já tenham rodado
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Run SonarCloud Analysis
        uses: SonarSource/sonarcloud-github-action@v2.2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args:
            -Dsonar.projectKey=HaylenoHossoe_pokedex-gui
            -Dsonar.organization=haylenohossoe
            # -Dsonar.sources=. # Descomente e ajuste se o SonarCloud nao estiver pegando os fontes automaticamente
            # -Dsonar.tests=src # Descomente e ajuste se o SonarCloud nao estiver pegando os testes automaticamente
            # -Dsonar.test.inclusions=**/*.test.js,**/*.test.jsx # Descomente e ajuste
          projectBaseDir: .


  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: [testes_e_build, analise_sonarcloud] # Agora depende também da análise do SonarCloud

    steps:
      - name: Verifica o código
        uses: actions/checkout@v2

      - name: Configure AWS Credentials for Academy
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # --- PASSO CRUCIAL: DEPLOY DA INFRA DO ECS/FARGATE ---
      - name: Deploy ECS/Fargate CloudFormation Stack
        run: |
          set -x
          aws cloudformation deploy \
            --template-file cloudformation-ecs.yml \
            --stack-name PokedexGuiEcsStack \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              VpcId=vpc-0ef104b9a906559fd \
              SubnetIds=subnet-0fc5a99dc1a158475,subnet-096e1bc5f6623b31f

      # --- LOGIN NO DOCKER HUB ---
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # --- BUILD DA IMAGEM DOCKER (com nome para Docker Hub) ---
      - name: Build Docker Image
        run: |
          docker build -t hayleno/pokedex-gui-frontend-repo:latest .

      # --- SCAN DE VULNERABILIDADES DA IMAGEM (TRIVY) --- # NOVO PASSO DE SEGURANÇA
      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master # Usar uma tag de versão específica é mais seguro, como v0.x.x
        with:
          image-ref: 'hayleno/pokedex-gui-frontend-repo:latest'
          format: 'table' # ou 'sarif' para integrar com o GitHub Security tab
          exit-code: '1' # Falhar o build se vulnerabilidades criticas/altas forem encontradas
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH' # Ajuste conforme sua política de segurança

      # --- PUSH DA IMAGEM DOCKER PARA DOCKER HUB ---
      - name: Push Image to Docker Hub
        run: |
          docker push hayleno/pokedex-gui-frontend-repo:latest

      # --- ATUALIZAR O SERVIÇO ECS (para puxar a nova imagem do Docker Hub) ---
      - name: Force new ECS service deployment
        run: |
          aws ecs update-service \
            --cluster pokedex-gui-cluster \
            --service pokedex-gui-frontend-service \
            --force-new-deployment