# .github/workflows/ci-cd.yml

# CI/CD completo com SonarCloud, DockerHub e Trivy
name: Pokédex Gui

on:
  push:
    branches:
      - containers-ecs
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: read
  id-token: write

jobs:
  # Job: testes e build da aplicação
  testes_e_build:
    runs-on: ubuntu-latest
    steps:
      - name: Verificar o Código
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 
      - name: Instalar Dependências
        run: npm install
      - name: Executar Testes
        run: npm run test
      - name: Fazer Build do Aplicativo React # validação do build antes do Docker
        run: npm run build
        env:
          CI: false

  # Job: análise de código com SonarCloud
  analise_sonarcloud:
    runs-on: ubuntu-latest
    needs: testes_e_build # garante que os testes e o build do app já tenham rodado
    steps:
      - name: Fazer Checkout do Código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Executar Análise SonarCloud
        uses: SonarSource/sonarcloud-github-action@v2.2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args:
            -Dsonar.projectKey=HaylenoHossoe_pokedex-gui
            -Dsonar.organization=haylenohossoe
            # -Dsonar.sources=. # descomentar e ajustar se o SonarCloud nao estiver pegando os fontes automaticamente
            # -Dsonar.tests=src # descomentar e ajustar se o SonarCloud nao estiver pegando os testes automaticamente
            # -Dsonar.test.inclusions=**/*.test.js,**/*.test.jsx # descomentar e ajustar caso necessário
          projectBaseDir: .

  # Job: implantação (deploy)
  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: [testes_e_build, analise_sonarcloud] # depende dos jobs anteriores

    steps:
      - name: Verificar o Código
        uses: actions/checkout@v2

      - name: Configurar Credenciais AWS para a Academy
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # deploy da infraestrutura AWS ECS/Fargate
      - name: Implantar Stack CloudFormation ECS/Fargate
        run: |
          set -x
          aws cloudformation deploy \
            --template-file cloudformation-ecs.yml \
            --stack-name PokedexGuiEcsStack \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              VpcId=vpc-0ef104b9a906559fd \
              SubnetIds=subnet-0fc5a99dc1a158475,subnet-096e1bc5f6623b31f

      # login no DockerHub
      - name: Fazer Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # build da imagem Docker (com nome para Docker Hub)
      - name: Fazer Build da Imagem Docker
        run: |
          docker build -t hayleno/pokedex-gui-frontend-repo:latest .

      # verredura (scan) de vulnerabilidades da imagem com o Trivy
      - name: Escanear Imagem Docker com Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'hayleno/pokedex-gui-frontend-repo:latest'
          format: 'table'
          exit-code: '1'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # enviar imagem Docker para o DockerHub
      - name: Enviar Imagem para o DockerHub
        run: |
          docker push hayleno/pokedex-gui-frontend-repo:latest

      # atualizar o serviço ECS (para puxar a nova imagem do DockerHub)
      - name: Forçar Novo Deploy do Serviço ECS
        run: |
          aws ecs update-service \
            --cluster pokedex-gui-cluster \
            --service pokedex-gui-frontend-service \
            --force-new-deployment