# .github/workflows/ci-cd.yml

name: Pokédex Gui - CI/CD completo com SonarQube Cloud 

on:
  push:
    branches:
      - containers-ecs
  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write

jobs:
  test_and_build:
    runs-on: ubuntu-latest
    steps:
      - name: Verifica o código
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 
      - name: Instala dependências
        run: npm install
      - name: Executa testes
        run: npm run test
      - name: Build React App (para validação do build antes do Docker)
        run: npm run build
        env:
          CI: false

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: test_and_build

    steps:
      - name: Verifica o código
        uses: actions/checkout@v2

      - name: Configure AWS Credentials for Academy
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # --- PASSO CRUCIAL: DEPLOY DA INFRA DO ECS/FARGATE ---
      # IMPORTANTE: A stack CloudFormation não precisa mais criar o repositório ECR.
      # Se o seu 'cloudformation-ecs.yml' contém um recurso ECR, você precisará removê-lo (veja o próximo item).
      # Este passo criará/atualizará o Cluster ECS, Task Definition e Serviço.
      - name: Deploy ECS/Fargate CloudFormation Stack
        run: |
          set -x # Mantenha isso para depuração adicional
          aws cloudformation deploy \
            --template-file cloudformation-ecs.yml \
            --stack-name PokedexGuiEcsStack \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              VpcId=vpc-0ef104b9a906559fd \
              SubnetIds=subnet-0fc5a99dc1a158475,subnet-096e1bc5f6623b31f
      # --- FIM DEPLOY INFRA ---

      # --- NOVO MÓDULO: LOGIN NO DOCKER HUB ---
      - name: Login to Docker Hub
        uses: docker/login-action@v3 # Use a action oficial para login no Docker Hub
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # --- FIM NOVO MÓDULO ---

      # --- MÓDULO 4.2 (Parte 1): BUILD DA IMAGEM DOCKER (com nome para Docker Hub) ---
      - name: Build Docker Image
        run: |
          # Use o seu nome de usuário do Docker Hub e o nome do repositório/imagem que deseja
          # Ex: docker build -t seu_usuario_dockerhub/pokedex-gui-frontend-repo:latest .
          docker build -t hayleno/pokedex-gui-frontend-repo:latest .
      # --- FIM MÓDULO 4.2 (Parte 1) ---

      # Scan de Vulnerabilidades (se for usar o Trivy, lembre-se de mudar a imagem de referência)

      # --- MÓDULO 4.2 (Parte 2): PUSH DA IMAGEM DOCKER PARA DOCKER HUB ---
      - name: Push Image to Docker Hub
        run: |
          # Ex: docker push hayleno/pokedex-gui-frontend-repo:latest
          docker push hayleno/pokedex-gui-frontend-repo:latest
      # --- FIM MÓDULO 4.2 (Parte 2) ---

      # --- MÓDULO 4.3: ATUALIZAR O SERVIÇO ECS (para puxar a nova imagem do Docker Hub) ---
      - name: Force new ECS service deployment
        run: |
          aws ecs update-service \
            --cluster pokedex-gui-cluster \
            --service pokedex-gui-frontend-service \
            --force-new-deployment