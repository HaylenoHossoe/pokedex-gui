# .github/workflows/deploy.yml

name: Pokédex Gui - DevOps - Deploy na AWS
on:
  push:
    branches:
      - main
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm install

      - name: Build React App
        run: npm run build
        env:
          CI: false

      - name: Configure AWS Credentials for Academy
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # ----- NOVA ETAPA DE DEPLOY DO CLOUDFORMATION COM AWS CLI -----
      - name: Deploy CloudFormation Stack (via AWS CLI)
        run: |
          aws cloudformation deploy \
            --template-file cloudformation-template.yml \
            --stack-name PokedexGuiStack \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides BucketName=pokedex-gui-frontend-bucket-seunomeunico # <<<<< Mantenha seu nome único aqui
          # Se você precisa passar o OAI como um segredo novamente (o que não deve ser o caso com o template atualizado)
          # --parameter-overrides BucketName=pokedex-gui-frontend-bucket-seunomeunico CloudFrontOriginAccessIdentity=${{ secrets.OAI_ID }}
      # -----------------------------------------------------------------

      - name: Sync S3 Bucket
        run: |
          aws s3 sync ./build/ s3://$(aws cloudformation describe-stacks --stack-name PokedexGuiStack --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' --output text) \
          --delete

      - name: Invalidate CloudFront Cache
        run: |
          CLOUDFRONT_DOMAIN=$(aws cloudformation describe-stacks --stack-name PokedexGuiStack --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDomainName`].OutputValue' --output text)
          CLOUDFRONT_DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?DomainName=='$CLOUDFRONT_DOMAIN'].Id" --output text)

          if [ -z "$CLOUDFRONT_DISTRIBUTION_ID" ]; then
            echo "Erro: Não foi possível obter o ID da distribuição CloudFront. Verifique o nome do domínio ou a existência da stack."
            exit 1
          fi

          echo "Invalidando cache para a distribuição CloudFront ID: $CLOUDFRONT_DISTRIBUTION_ID"
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"